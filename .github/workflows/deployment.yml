name: Application Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'quest/**'

permissions:
      id-token: write
      contents: read

jobs:
  terraform:
    name: CICD deployment
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      ENV: 'dev'
      PROJECT_NAME: 'rearc'
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #  ECR_REPOSITORY: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.ENV }}.amazonaws.com/${{ env.ENV }}-${{ env.PROJECT_NAME }}-quest
      IMAGE_TAG: 'latest'


    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to ECR
        working-directory: ./quest
        run: |
          ECR_REPOSITORY="${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ENV }}-${{ env.PROJECT_NAME }}-quest"
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
          docker build -t $ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
          docker push $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

      - name: ECS new deployment
        run: |
          ECS_CLUSTER_NAME="${{ env.ENV }}-${{ env.PROJECT_NAME }}-cluster"
          ECS_SERVICE_NAME="${{ env.ENV }}-${{ env.PROJECT_NAME }}-service"

          echo "Triggering new deployment on ECS service: $ECS_SERVICE_NAME"
          aws ecs update-service \
            --cluster "$ECS_CLUSTER_NAME" \
            --service "$ECS_SERVICE_NAME" \
            --force-new-deployment


      - name: Rollback on ECS failure
        if: failure()  # only runs if previous steps failed
        run: |
          echo "Deployment failed. Rolling back to previous task definition..."
          
          CLUSTER="${{ env.ENV }}-${{ env.PROJECT_NAME }}-cluster"
          SERVICE="${{ env.ENV }}-${{ env.PROJECT_NAME }}-service"

          # Get previous task definition from service
          PREV_TASK_DEF=$(aws ecs describe-services \
            --cluster $CLUSTER \
            --services $SERVICE \
            --query "services[0].deployments[?status=='PRIMARY'].taskDefinition" \
            --output text)

          echo "Previous task definition: $PREV_TASK_DEF"

          # Redeploy the old task definition
          aws ecs update-service \
            --cluster $CLUSTER \
            --service $SERVICE \
            --task-definition $PREV_TASK_DEF \
            --force-new-deployment



